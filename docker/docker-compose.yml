# ####################################################################################################################
# Microservices, Webclient, Kafka and Databases
# The heart of the DIVA
# ####################################################################################################################


version: '3.9'

x-extra-hosts: &extra-hosts
  extra_hosts:
    - diva:${DOCKER_IP:-172.17.0.1}

x-mongodb-env: &mongodb-env
  MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@documentstore:${MONGODB_PORT}

x-policies-env: &policies-env
  POLICY_MIDDLEWARE: ${POLICY_MIDDLEWARE}

x-log-level-env: &log-level-env
  SYSTEM_LOG_LEVEL: ${SYSTEM_LOG_LEVEL}

x-entity-management-env: &entity-management-env
  ENTITY_MANAGEMENT_URL: http://${DIVA_HOST:-entity-management}:${ENTITY_MANAGEMENT_PORT}/

x-cors-env: &cors-env
  CORS_ALLOW_ORIGIN: "*"

x-elasticsearch-env: &elasticsearch-env
  ELASTICSEARCH_URL: http://elasticsearch:${ELASTICSEARCH_PORT}

x-neo4j-env: &neo4j-env
  NEO4J_URL: bolt://neo4j:${NEO4J_BOLT_PORT}
  NEO4J_ROOT_USERNAME: ${NEO4J_ROOT_USERNAME}
  NEO4J_ROOT_PASSWORD: ${NEO4J_ROOT_PASSWORD}

x-airflow-env: &airflow-env
  AIRFLOW_URL: http://airflow-webserver:${AIRFLOW_PORT}
  _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
  _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}

x-kafka-env: &kafka-env
  KAFKA_URL: broker:${KAFKA_PORT}

x-business-decision-point-env: &business-decision-point-env
  BUSINESS_DECISION_POINT_URL: http://${DIVA_HOST:-business-decision-point}:${BUSINESS_DECISION_POINT_PORT}

x-base-core-service-env: &base-core-service-env
  <<: *mongodb-env
  <<: *kafka-env
  <<: *cors-env
  <<: *business-decision-point-env
  <<: *log-level-env
  <<: *policies-env

x-base-core-service: &base-core-service
  depends_on:
    - documentstore
    - broker
  networks:
    - core
  restart: always
  environment:
    <<: *base-core-service-env
    KAFKA_EVENT_TOPIC: entity.events

services:

  # ####################################################################################################################
  # STATIC VUE WEB CLIENT
  # ####################################################################################################################

  web-client:
    container_name: web-client
    image: ${REGISTRY}web-client:19.0.0
    ports:
      - ${WEB_CLIENT_PORT}:80
    restart: always
    environment:
      VUE_APP_API_GATEWAY_URL: ${VUE_APP_API_GATEWAY_URL}
      VUE_APP_KEYCLOAK_URL: ${VUE_APP_KEYCLOAK_URL}
      VUE_APP_KEYCLOAK_REALM: ${VUE_APP_KEYCLOAK_REALM}
      VUE_APP_KEYCLOAK_CLIENT_ID: ${VUE_APP_KEYCLOAK_CLIENT_ID}
      VUE_APP_REGISTER_AVAILABLE: ${VUE_APP_REGISTER_AVAILABLE}
    networks:
      - core

  kong:
    image: kong:2.7.1
    environment:
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_LUA_PACKAGE_PATH=/plugins/?.lua
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/${KONG_DECLARATIVE_CONFIG}
    ports:
      - ${KONG_PORT}:${KONG_PORT}
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    restart: always
    volumes:
      - ../core/kong-gateway/plugins:/plugins/kong/plugins
      - ../core/kong-gateway/${KONG_DECLARATIVE_CONFIG}:/${KONG_DECLARATIVE_CONFIG}
      - ../core/kong-gateway/kong.conf:/etc/kong/kong.conf
    networks:
      - core

  # ####################################################################################################################
  # Entity Management Microservice
  # ####################################################################################################################
  
  entity-management:
    <<: *base-core-service
    <<: *extra-hosts
    image: ${REGISTRY}entity-management:1.0.0
    container_name: entity-management
    depends_on:
      - broker
      - documentstore
      - neo4j
    environment:
      <<: *base-core-service-env
      <<: *neo4j-env
      PORT: ${ENTITY_MANAGEMENT_PORT}
    ports:
      - ${ENTITY_MANAGEMENT_PORT}:${ENTITY_MANAGEMENT_PORT}
    networks:
      - core

  # ####################################################################################################################
  # Reviews Management Service
  # ####################################################################################################################

  documentstore:
    image: mongo:4.1-xenial
    container_name: documentstore
    volumes:
      - documentstore:/data/db
      - ./util/docker-mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    restart: always
    ports:
      - ${MONGODB_PORT}:27017
    networks:
      - core


  # ####################################################################################################################
  # Search and Aggregation Microservices
  # ####################################################################################################################

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.2
    container_name: elasticsearch
    restart: always
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
      - ../core/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    networks:
      - core

  elasticsearch-connector:
    <<: *base-core-service
    <<: *extra-hosts
    image: ${REGISTRY}elasticsearch-connector:0.2.8
    container_name: elasticsearch-connector
    depends_on:
      - broker
      - elasticsearch
      - documentstore
      - neo4j
    environment:
      <<: *base-core-service-env
      <<: *entity-management-env
      <<: *elasticsearch-env
      <<: *neo4j-env
      PORT: ${ELASTICSEARCH_CONNECTOR_PORT}
      KAFKA_CONSUMER_TOPICS: "[\"entity.events\", \"datanetwork.events\"]"
    ports:
      - ${ELASTICSEARCH_CONNECTOR_PORT}:${ELASTICSEARCH_CONNECTOR_PORT}
    networks:
      - core

  search-assistant:
    <<: *extra-hosts
    image: ${REGISTRY}search-assistant:0.2.0
    container_name: search-assistant
    environment:
      <<: *elasticsearch-env
      <<: *cors-env
      <<: *log-level-env
      <<: *policies-env
      <<: *business-decision-point-env
      NODE_ENV: production
      PORT: ${SEARCH_ASSISTANT_PORT}
    restart: always
    depends_on:
      - elasticsearch
      - business-decision-point
    ports:
      - ${SEARCH_ASSISTANT_PORT}:${SEARCH_ASSISTANT_PORT}
    networks:
      - core

  analytics-assistant:
    <<: *extra-hosts
    image: ${REGISTRY}analytics-assistant:2.0.3
    container_name: analytics-assistant
    environment:
      <<: *elasticsearch-env
      <<: *cors-env
      <<: *log-level-env
      <<: *policies-env
      <<: *business-decision-point-env
      NODE_ENV: production
      PORT: ${ANALYTIC_ASSISTANT_PORT}
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - ${ANALYTIC_ASSISTANT_PORT}:${ANALYTIC_ASSISTANT_PORT}
    networks:
      - core

  # ####################################################################################################################
  # History Assistant
  # ####################################################################################################################

  history-assistant:
    <<: *extra-hosts
    image: ${REGISTRY}history-assistant:0.1.4
    container_name: history-assistant
    environment:
      <<: *base-core-service-env
      <<: *entity-management-env
      <<: *policies-env
      NODE_ENV: production
      PORT: ${HISTORY_ASSISTANT_PORT}
      IGNORE_FIELDS: "[\"modifiedAt\"]"
    restart: always
    depends_on:
      - documentstore
    ports:
      - ${HISTORY_ASSISTANT_PORT}:${HISTORY_ASSISTANT_PORT}
    networks:
      - core       

  # ####################################################################################################################
  # Profiling Assistant
  # ####################################################################################################################

  profiling-assistant:
    <<: *extra-hosts
    image: ${REGISTRY}profiling-assistant:1.1.1
    container_name: profiling-assistant
    environment:
      <<: *mongodb-env
      <<: *airflow-env
      <<: *log-level-env
      <<: *cors-env
      <<: *policies-env
      <<: *business-decision-point-env
      NODE_ENV: production
      PORT: ${PROFILING_ASSISTANT_PORT}
    restart: always
    depends_on:
      - documentstore
    ports:
      - ${PROFILING_ASSISTANT_PORT}:${PROFILING_ASSISTANT_PORT}
    networks:
      - core       

  # ####################################################################################################################
  # Apache Kafka & ZooKeeper
  # ####################################################################################################################

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    restart: always
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks:
      - core
    volumes:
      - zookeeperData:/var/lib/zookeeper/data
      - zookeeperDatalog:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: broker
    hostname: broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    networks:
      - core
    volumes:
      - brokerData:/var/lib/kafka/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://broker:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
      KAFKA_LOG_RETENTION_BYTES: ${KAFKA_LOG_RETENTION_BYTES}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: >-
        entity.events:1:1,
        datanetwork.events:1:1


  # ####################################################################################################################
  # DIVA Lake Services
  # ####################################################################################################################

  diva-lake:
    image: minio/minio:RELEASE.2021-03-26T00-00-41Z
    container_name: diva-lake
    ports:
      - ${DIVALAKE_PORT}:${DIVALAKE_PORT}
    restart: always
    volumes:
      - divaLake:/data
    environment:
      <<: *log-level-env
      <<: *cors-env
      <<: *policies-env
      MINIO_ACCESS_KEY: ${DIVA_LAKE_USERNAME}
      MINIO_SECRET_KEY: ${DIVA_LAKE_PASSWORD}
    entrypoint: sh
    command: -c 'mkdir -p /data/file-lake && mkdir -p /data/analyze && /usr/bin/minio server /data'
    networks:
      - core

  diva-lake-adapter:
    <<: *extra-hosts
    image: ${REGISTRY}diva-lake-adapter:0.6.0
    container_name: diva-lake-adapter
    restart: always
    networks:
      - core
    ports:
      - ${DIVALAKE_ADAPTER_PORT}:${DIVALAKE_ADAPTER_PORT}
    environment:
      <<: *mongodb-env
      <<: *kafka-env
      <<: *cors-env
      <<: *log-level-env
      <<: *entity-management-env
      <<: *policies-env
      <<: *business-decision-point-env
      NODE_ENV: development
      PORT: ${DIVALAKE_ADAPTER_PORT}
      DIVA_LAKE_HOST: diva-lake
      DIVA_LAKE_PORT: ${DIVALAKE_PORT}
      DIVA_LAKE_USERNAME: ${DIVA_LAKE_USERNAME}
      DIVA_LAKE_PASSWORD: ${DIVA_LAKE_PASSWORD}
      BUCKET_NAME: file-lake

  # ####################################################################################################################
  # Urban Pulse Services
  # ####################################################################################################################

  urban-pulse-adapter:
    <<: *extra-hosts
    image: ${REGISTRY}urban-pulse-adapter:0.2.2
    container_name: urban-pulse-adapter
    restart: always
    networks:
      - core
    ports:
      - ${URBAN_PULSE_ADAPTER_PORT}:${URBAN_PULSE_ADAPTER_PORT}
    environment:
      <<: *cors-env
      <<: *log-level-env
      <<: *entity-management-env
      <<: *policies-env
      <<: *business-decision-point-env
      PORT: ${URBAN_PULSE_ADAPTER_PORT}

  # ####################################################################################################################
  # Event Emitter Service
  # ####################################################################################################################

  event-emitter:
    <<: *extra-hosts
    image: ${REGISTRY}event-emitter:0.2.1
    container_name: event-emitter
    restart: always
    depends_on:
      - broker
    ports:
      - ${EVENT_EMITTER_PORT}:${EVENT_EMITTER_PORT}
    networks:
      - core
    environment:
      <<: *kafka-env
      <<: *cors-env
      <<: *log-level-env
      <<: *entity-management-env
      PORT: ${EVENT_EMITTER_PORT}

  # ####################################################################################################################
  # Business Decision Point Service
  # ####################################################################################################################

  business-decision-point:
    <<: *extra-hosts
    image: ${REGISTRY}business-decision-point:0.1.1
    container_name: business-decision-point
    restart: always
    depends_on:
      - documentstore
      - neo4j
    ports:
      - ${BUSINESS_DECISION_POINT_PORT}:${BUSINESS_DECISION_POINT_PORT}
    networks:
      - core
    environment:
      <<: *cors-env
      <<: *mongodb-env
      <<: *neo4j-env
      PORT: ${BUSINESS_DECISION_POINT_PORT}
      POLICY_MIDDLEWARE: "false"
      SERVICES_URLS: "entity-management::http://${DIVA_HOST:-entity-management}:3000,profiling-assistant::http://${DIVA_HOST:-profiling-assistant}:3011"

  # ####################################################################################################################
  # Business Rules Executor Service
  # ####################################################################################################################

  business-rules-executor:
    <<: *extra-hosts
    image: ${REGISTRY}business-rules-executor:1.0.0
    container_name: business-rules-executor
    depends_on:
      - broker
    restart: always
    networks:
      - core
    environment:
      <<: *entity-management-env
      <<: *policies-env
      <<: *kafka-env
      <<: *business-decision-point-env

  # ####################################################################################################################
  # DIVA Data Network Graph DB
  # ####################################################################################################################

  neo4j:
    image: neo4j:4.3.7-community
    hostname: neo4j
    container_name: neo4j
    restart: always
    ports:
      - "${NEO4J_PORT}:7474"
      - "${NEO4J_BOLT_PORT}:7687"
    volumes:
      - neo4j:/data
    environment:
      NEO4J_AUTH: ${NEO4J_ROOT_USERNAME}/${NEO4J_ROOT_PASSWORD}
      NEO4J_dbms_active__database: ${NEO4J_DATABASE_NAME}
      NEO4J_dbms_logs_debug_level: DEBUG
    networks:
      - core

# ####################################################################################################################
# Docker Volume and Network Settings
# ####################################################################################################################

volumes:
  documentstore:
    driver: local
  elasticsearch:
    driver: local
  neo4j:
    driver: local 
  divaLake:
    driver: local
  brokerData:
    driver: local
  zookeeperData:
    driver: local
  zookeeperDatalog:
    driver: local

networks:
  core:
    name: core
