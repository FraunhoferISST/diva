{
  "paths": {
    "/edges": {
      "parameters": [
        {
          "$ref": "#/components/parameters/divaHeader"
        }
      ],
      "get": {
        "tags": [
          "edges"
        ],
        "summary": "Get edges connected to an entity",
        "description": "The method returns a list of edges inforamtion that has relationships to the `from` entity. Note that same node may apper multiple times in the result list, if it has multiple relationships to the `from` entity and `edgeType` query param is not specified. If you want to return all nodes regardless of the edge direction, set `bidirectional` query parameter. Please note that if `bidirectional` is true, the response preserves the correct edge direction and the `from` entity can appear as a `to` entity corresponding to specific edge type!",
        "operationId": "getEdges",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The `id` of the entity for wich the relationships will be fetched",
            "required": false,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Additionaly you can specify the `id` to get edges only betwenn two specific entities",
            "required": false,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "edgeTypes",
            "in": "query",
            "description": "The types of the relations to be fetched. Is a coma separeted list of known types. If not specified, all types will be fetched",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/EdgeType"
            }
          },
          {
            "name": "bidirectional",
            "in": "query",
            "description": "If true, the directions of the edges will be ignored. By default the direction of the edge is asumed to be directed from the `from` entity",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of edges per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "gives next page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromNodeType",
            "in": "query",
            "description": "The specific type of the node (e.g, user, resource, review)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toNodeType",
            "in": "query",
            "description": "The specific type of the node (e.g, user, resource, review)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get edges succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Edges",
                  "description": "The list of the entities `id`'s in the relationship",
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    },
                    "cursor": {
                      "type": "string",
                      "description": "Cursor to the next page. Set the returned cursor as `cursor` query parameter in the next request to retrive following page"
                    },
                    "total": {
                      "description": "Total number of users that could be returned by current query",
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "5XX": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "edges"
        ],
        "summary": "Post a single edge into the datanetwork.",
        "operationId": "postEdge",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostEdge"
        },
        "responses": {
          "204": {
            "description": "Post edge succesfull. Returns the `id` of the new edge",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeId"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "5XX": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/edges/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/divaHeader"
        }
      ],
      "get": {
        "tags": [
          "edges"
        ],
        "summary": "Get edge data by id",
        "description": "Returns edge data and the `id`'s of by the edge connected entities",
        "operationId": "getEdge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The `id` of the edge",
            "required": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/EdgeId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get edge succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Edge"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "5XX": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "edges"
        ],
        "summary": "Patch a single edge in the datanetwork.",
        "operationId": "patchEdge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The `id` of the edge",
            "required": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/EdgeId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PatchEdge"
        },
        "responses": {
          "204": {
            "description": "Patch edge succesfull."
          },
          "4XX": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "5XX": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "edges"
        ],
        "summary": "Delete a edge by id.",
        "operationId": "deleteEdgeById",
        "description": "Delete a edge from the data network by edge `id`",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The `id` of the edge",
            "required": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/EdgeId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted edge succesfully"
          },
          "4XX": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "5XX": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/nodes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/divaHeader"
        }
      ]
    },
    "/nodes/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/divaHeader"
        }
      ],
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get node data by id",
        "description": "Returns node data",
        "operationId": "getNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The `id` of the node. Is represented by corresponding entity `id`",
            "required": true,
            "allowReserved": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get node succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "5XX": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    }
  },
  "components": {
    "requestBodies": {
      "PostEdge": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "title": "Edge",
              "description": "Definition of an Edge as application/json.",
              "type": "object",
              "required": [
                "from",
                "to",
                "edgeType"
              ],
              "properties": {
                "from": {
                  "$ref": "#/components/schemas/EntityId"
                },
                "to": {
                  "$ref": "#/components/schemas/EntityId"
                },
                "edgeType": {
                  "$ref": "#/components/schemas/EdgeType"
                },
                "properties": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "PatchEdge": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "description": "Properties to be patched",
              "type": "object"
            }
          }
        }
      },
      "PutNode": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "title": "Node",
              "description": "Node defined by the `entityId`",
              "type": "object",
              "required": [
                "entityId"
              ],
              "properties": {
                "entityId": {
                  "$ref": "#/components/schemas/EntityId"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "EdgeId": {
        "title": "Edge ID",
        "description": "Unique identifier of an edge",
        "type": "string",
        "example": "edge:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189",
        "pattern": "edge:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      },
      "Edge": {
        "title": "Edge",
        "description": "Definition of an Edge",
        "type": "object",
        "required": [
          "from",
          "to",
          "edgeType"
        ],
        "properties": {
          "from": {
            "title": "From entity",
            "description": "The entity from wich the relation is outgoing",
            "type": "object",
            "properties": {
              "entityId": {
                "$ref": "#/components/schemas/EntityId"
              }
            }
          },
          "to": {
            "title": "To entity",
            "description": "The entity to wich the relation is going",
            "type": "object",
            "properties": {
              "entityId": {
                "$ref": "#/components/schemas/EntityId"
              }
            }
          },
          "edgeType": {
            "$ref": "#/components/schemas/EdgeType"
          },
          "id": {
            "$ref": "#/components/schemas/EdgeId"
          }
        }
      },
      "Node": {
        "title": "Node",
        "description": "Definition of a node",
        "type": "object",
        "required": [
          "entityId"
        ],
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "EdgeType": {
        "title": "Edge type",
        "description": "The type of the relation that the edge represents",
        "type": "string",
        "enum": [
          "isCreatorOf",
          "isPartOf",
          "isOwnerOf",
          "isReviewOf",
          "likes",
          "keywordsSimilarity",
          "textContentSimilarity",
          "refersTo",
          "isPreviousVersionOf",
          "acquired"
        ]
      }
    },
    "responses": {
      "Success": {
        "description": "Succesful"
      }
    }
  }
}