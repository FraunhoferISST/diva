openapi: 3.0.0
info:
  description: "Resource Management Service is responsible for all CRUD operations on resources"
  version: 1.0.0
  title: Resource Management API
tags:
  - name: resources
    description: Operations about resources
paths:
  /resources:
    post:
      tags:
        - resources
      summary: Create resource
      description: Create mew resources with the provided data. The attributes of the resource may vary depending on the
        `resourceType`. The request body must containt at least all the attributes defined in the schema below. This opperations
        supports bulk mode so that multiple resource can be created with one request
      operationId: createResource
      parameters:
        - $ref: "#/components/parameters/useridParam"
      requestBody:
        $ref: "#/components/requestBodies/ResourceCreate"
      responses:
        201:
          $ref: "#/components/responses/ResourceCreateSuccess"
        207:
          $ref: "#/components/responses/Multi"
        406:
          $ref: "#/components/responses/InvalidDataError"
        409:
          $ref: "#/components/responses/ResourceAlreadyExistsError"
        500:
          $ref: "#/components/responses/UnexpectedError"
    get:
      tags:
        - resources
      summary: Get list of resources
      description: To get the list of resources you can specify projection with `fields` paramter and set the
        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`
        parameter. The cursor to the next page will be included in the response body.
      operationId: getResources
      parameters:
        - $ref: "#/components/parameters/useridParam"
        - name: fields
          in: query
          description: Coma separated projection fields
          example: "title,resourceType,description"
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          example: "aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg=="
          schema:
            type: string
        - name: pageSize
          in: query
          description: Page size
          required: false
          explode: true
          example: 10
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionSize:
                    type: integer
                  collection:
                    type: array
                    items:
                      $ref: "#/components/schemas/Resource"
                  cursor:
                    type: string
                  total:
                    type: number
        "500":
          $ref: "#/components/responses/UnexpectedError"

  "/resources/{id}":
    get:
      tags:
        - resources
      summary: Get resource by id
      description: Projection can be specified with `fields` paramter
      operationId: getResourceById
      parameters:
        - $ref: "#/components/parameters/useridParam"
        - name: id
          in: path
          description: The id of the resource to fetch
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: Coma separated projection fields
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResourceResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - resources
      summary: Update resource
      description: Use this method, if you want to replace complete resource. New resource is created if no resource with
        the provided `id` exists. Note that on this operation **all** fields are replaced.
      operationId: updateResource
      parameters:
        - $ref: "#/components/parameters/useridParam"
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ResourceUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "201":
          description: Resource created
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          $ref: "#/components/responses/ResourceAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    patch:
      tags:
        - resources
      summary: Patch resource
      description: Use this method to do a partial update of the resource. In the request provided fields
        will be merged with the existing resource object. Merge is always performed at the root level. Empty patches are
        not accepted
      operationId: patchResource
      parameters:
        - $ref: "#/components/parameters/useridParam"
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ResourcesPatch"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ResourceAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - resources
      summary: Delete resource
      description: Delete existing resource by id
      operationId: deleteResource
      parameters:
        - $ref: "#/components/parameters/useridParam"
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

servers:
  - url: http://localhost:3000
components:
  requestBodies:
    ResourceCreate:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ResourceCreate"
              - $ref: "#/components/schemas/ResourceCreateBulk"
    ResourceUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceCreate"

    ResourcesPatch:
      required: true
      content:
        application/json:
          schema:
            title: Patch body
            description: The body can be any attribute defined in the resource schema. The supplied attributes
              overwrite the existing
            type: object
            minProperties: 1
  schemas:
    ResourceCreate:
      description: Minimal required attributes for resource creation
      type: object
      required:
        - resourceType
        - title
      properties:
        title:
          type: string
          title: Title
          description: The title of the entity
          minLength: 1
          pattern: "^(.*)$"
        resourceType:
          type: string
          title: Resource Type
          description: The general type of the resource
          minLength: 1
          enum:
            - generic
            - file
            - urbanPulseSensor

    ResourceCreateBulk:
      type: array
      title: Resource create bulk request
      description: Array of resources to create multiple resource in one bulk request
      items:
        $ref: "#/components/schemas/ResourceCreate"

    Entity:
      title: General Entity Data
      type: object
      required:
        - title
        - id
      additionalProperties: true
      properties:
        id:
          type: string
          title: Unique ID
          description: An unique ID of the entity
          example: "entity:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
          format: uri
          pattern: "^resource:uuid:"
        created:
          type: string
          title: Creation date
          description: Creation date of the entity
          example: '2018-11-08T13:55:45Z'
          format: date-time
        licenses:
          type: array
          title: Licenses
          description: Licenses which are applied to the entity
          items:
            type: string
            title: Items
            description: A license
            format: uri
        accessCount:
          title: Access count
          description: How many times this entity was viewed
          type: number
        modified:
          type: string
          title: Modification date
          description: Timestamp of the last change of the data
          example: '2018-11-08T13:55:45Z'
          format: date-time
        title:
          type: string
          title: Title
          description: The title of the entity
          pattern: "^(.*)$"
        description:
          type: string
          title: Description
          description: The description of the entity
        keywords:
          type: array
          title: Keywords
          description: Keywords which tag the entity
          items:
            type: string
            title: Items
            description: A keyword
        owner:
          type: string
          title: Owner ID
          description: Owner of this entity
          pattern: "^(.*)$"
        versionInfo:
          type: string
          title: Version Info
          description: A string describing the version of the entity
          pattern: "^(.*)$"
        versionNotes:
          type: string
          title: Version notes
          description: A string describing the version of the entity
          pattern: "^(.*)$"

    Resource:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
          title: General Resource Data
          description: General Resource schema
          additionalProperties: true
          required:
            - resourceType
          properties:
            resourceType:
              type: string
              title: Resource Type
              description: The general type of the resource
              enum:
                - file
                - generic
                - urban-pulse-sensor
    Error:
      type: object
      title: Operation error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object
  responses:
    Success:
      description: Succesful
      content:
        text/html:
          schema:
            type: string
    SuccessEmpty:
      description: Succesful operation
    Multi:
      description: Multi-status response in case of a bulk request
      content:
        application/json:
          schema:
            title: Multi-status response
            description: Indicates the status for operation for each resource in a bulk request
            type: array
            items:
              type: object
              required:
                - statusCode
                - uniqueFingerprint
              properties:
                statusCode:
                  title: Status Code
                  description: Status Code for single resource operation. Can be one of the codes that is returned for
                    opeartion on a single resource
                  type: integer
                  example: 201
                uniqueFingerprint:
                  type: string
                  title: Unique indentifier
                  description: Global Unique indentifier as described in resource schema
                data:
                  title: Operation data
                  description: Data as a result of a single resource operation
                  oneOf:
                    - type: string
                    - type: object
                error:
                  $ref: "#/components/schemas/Error"

    ResourceCreateSuccess:
      description: Succesful resource creation retruns created resource id
      content:
        text/html:
          schema:
            type: string
            title: Created resource id
            description: An unique id of the processed entity
            example: "resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            format: uri
            pattern: "^resource:uuid:"
    ResourceResponse:
      description: Resource data response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Resource"

    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ResourceAlreadyExistsError:
      description: Resource with the given `uniqueFingerprint` already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  parameters:
    useridParam:
      in: header
      description: The id of the origin that produces action/message. Can be a user or service
      name: x-actorid
      schema:
        type: string
        minLength: 1
      required: true
