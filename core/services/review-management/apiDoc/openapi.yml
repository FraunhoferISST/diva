openapi: 3.0.0
info:
  description: "Review Management Service is responsible for all CRUD operations on reviews"
  version: 1.0.0
  title: Review Management API
servers:
  - url: http://localhost:3003
tags:
  - name: reviews
    description: Operations about reviews

paths:
  /reviews:
    post:
      tags:
        - reviews
      summary: Create Review
      description: Create new review with the provided data.
      operationId: createReview
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ReviewCreate"
      responses:
        201:
          $ref: "#/components/responses/ReviewCreateSuccess"
        406:
          $ref: "#/components/responses/InvalidDataError"
        5XX:
          $ref: "#/components/responses/UnexpectedError"

    get:
      tags:
        - reviews
      summary: Get list of reviews
      description: To get the collection of reviews you can set the page size with `pageSize`. 
        Default page size is **30**. The next page can be fatched by using the `cursor`
        parameter. The cursor to the next page will be included in the response body.
        You can set `belongsTo` to filter reviews for a certain entity. You can also set
        `creatorId` to get reviews from a specific actor.
      operationId: getReviews
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          example: "aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg=="
          schema:
            type: string
        - name: fields
          in: query
          description: Projection fields
          required: false
          explode: true
          example: "reviewText,rating"
          schema:
            type: string
        - name: pageSize
          in: query
          description: Page size
          required: false
          explode: true
          example: 10
          schema:
            type: integer
            format: int32
        - name: belongsTo
          in: query
          description: Coma separated projection fields
          example: "resource:uuid:d420062a-881f-424a-871e-475aea5a2b64"
          required: false
          explode: false
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EntityId"
        - name: creatorId
          in: query
          description: Coma separated projection fields
          example: "user:uuid:e410062a-881f-424a-571e-377aea5b2b5f"
          required: false
          explode: false
          allowReserved: true
          schema:
            $ref: "#/components/schemas/ActorId"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionSize:
                    type: integer
                  collection:
                    type: array
                    items:
                      $ref: "#/components/schemas/Review"
                  cursor:
                    type: string
        "500":
          $ref: "#/components/responses/UnexpectedError"

  "/reviews/{id}":
    get:
      tags:
        - reviews
      summary: Get review by id
      description: Returns a specific Review
      operationId: getReviewById
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: The id of the asset to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ReviewResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

    patch:
      tags:
        - reviews
      summary: Patch review
      description: Use this method to do a partial update of the review. In the request provided fields
        will be merged with the existing review object.
      operationId: patchReview
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ReviewPatch"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

    delete:
      tags:
        - reviews
      summary: Delete review
      description: Delete existing review by id
      operationId: deleteReview
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

components:
  
  requestBodies:

    ReviewCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewCreate"

    ReviewPatch:
      required: true
      content:
        application/json:
          schema:
            title: Patch body
            description: The body can be any attribute defined in the review schema. The supplied attributes
              overwrite the existing. Some special fields (like the id) will be ignored by the service.
            type: object
            minProperties: 1

  schemas:

    ActorId:
      title: Actor ID
      description: Unique identifier of an actor
      type: string
      example: "user:uuid:ef2sad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    ReviewId:
      title: Review ID
      description: Unique identifier of an review
      type: string
      example: "review:uuid:ef2sad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^review:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    EntityId:
      title: Entity ID
      description: Unique identifier of an entity
      type: string
      example: "resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    Entity:
      title: General Entity Data
      type: object
      required:
        - id
        - creatorId
        - created
        - modified
        - entityType
      additionalProperties: false
      properties:
        id:
          $ref:  "#/components/schemas/ReviewId"
        created:
          type: string
          title: Creation date
          description: Creation date of the entity
          example: '2018-11-08T13:55:45Z'
          format: date-time
        modified:
          type: string
          title: Modification date
          description: Timestamp of the last change of the data
          example: '2018-11-08T13:55:45Z'
          format: date-time
        creatorId:
          $ref: "#/components/schemas/ActorId" 
        entityType:
          type: string
          title: Entity Type
          description: The general type of the entity
          enum:
            - review

    ReviewCreate:
      description: Minimal required attributes for review creation
      type: object
      required:
        - reviewText
        - belongsTo
        - rating
      properties:
        reviewText:
          type: string
          title: Review Text
          description: the review text written by a user
          minLength: 1
          pattern: "^(.*)$"
        rating:
          type: number
          title: Rating
          description: Rating given by a user (value between 1-5)
          minimum: 1
          maximum: 5
        belongsTo:
          $ref:  "#/components/schemas/EntityId"

    Review:
      title: Review Data
      allOf:
        - $ref: "#/components/schemas/Entity"
        - $ref: "#/components/schemas/ReviewCreate"
            
    Error:
      type: object
      title: Operation Error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object
  
  responses:

    Success:
      description: Succesful
      content:
        text/plain:
          schema:
            type: string

    ReviewCreateSuccess:
      description: Succesful review creation retruns created review id
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ReviewId"

    ReviewResponse:
      description: Review data response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Review"

    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFoundError:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  parameters:
    
    actorIdParam:
      in: header
      description: The id of the origin that produces action/message. Can be a user or service
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true
