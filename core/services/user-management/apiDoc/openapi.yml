openapi: 3.0.0
info:
  description: "User Management Service is responsible for all CRUD operations on users and user images and handles the
    authentication"
  version: 1.0.0
  title: User Management API
tags:
  - name: users
    description: Operations about users
  - name: userImages
    description: Operations on users image. Only PNG and JPEG supported.
paths:
  /users:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    post:
      tags:
        - users
      summary: Create user
      description: Create mew user with the provided `username`, `e-mail` and `password`.
        The operations resutrns created user id on success
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/UsersCreate"
      responses:
        "201":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          $ref: "#/components/responses/UserAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      tags:
        - users
      summary: Get list of users
      description: To get the list of users you can specify projection with `fields` paramter and set the
        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`
        parameter. The cursor to the next page will be included in the response body. There is nore further pages, if
        the `cursor` is not included in the response
      operationId: getUsers
      parameters:
        - name: fields
          in: query
          description: Coma separated projection fields
          required: false
          explode: true
          allowReserved: true
          example: "username,email,creationDate"
          schema:
            type: string
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: Filter by email
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
            format: email
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 30
            format: int32
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionSize:
                    description: Number of users returned in current response
                    type: integer
                  collection:
                    type: array
                    description: The array of users objects
                    items:
                      $ref: "#/components/schemas/UserResponse"
                  cursor:
                    type: string
                    description: Cursor to the next page. Set the returned cursor as `cursor` query parameter in the
                      next request to retrive following page
                  total:
                    description: Total number of users that could be returned by current query
                    type: number
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
      - $ref: "#/components/parameters/userIdParam"
    get:
      tags:
        - users
      summary: Get user by id
      description: Projection can be specified with `fields` paramter
      operationId: getUserById
      parameters:
        - name: fields
          in: query
          description: Coma separated projection fields
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - users
      summary: Update user
      description: New user is created if no user with
        the provided `id` exists. Note that in this operation you can replace **all** fields (except `id`). At least `username` and `e-mail`
        must be provided.
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        $ref: "#/components/requestBodies/UsersUpdate"
      responses:
        "204":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          $ref: "#/components/responses/UserAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    patch:
      tags:
        - users
      summary: Patch user
      description: Use this method to do a partial updated of the user document. In the request provided fields
        will be merged with the existing user object.
      operationId: patchUser
      requestBody:
        $ref: "#/components/requestBodies/UsersPatch"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/UserAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - users
      summary: Post user (alias for PATCH)
      description: Use this method to do a partial updated of the user document. In the request provided fields
        will be merged with the existing user object.
      operationId: patchUser
      requestBody:
        $ref: "#/components/requestBodies/UsersPatch"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/UserAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete existing user and user image by id
      operationId: deleteUser
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: Logs user into the system with the provided E-Mail and password and generates JWT
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User verified
          content:
            application/json:
              schema:
                description: User Response schema
                type: object
                additionalProperties: false
                required:
                  - id
                  - username
                  - email
                  - password
                  - create
                  - modified
                  - token
                properties:
                  username:
                    type: string
                  id:
                    type: string
                  email:
                    type: string
                    format: email
                  imageId:
                    type: string
                    description: ID of the profile image
                  imageUrl:
                    type: string
                    description: URL to external profile image
                  created:
                    type: string
                    format: date-time
                    description: User creation date
                  modified: 
                    type: string
                    format: date-time
                    description: User last modified date  
                  token:
                    type: string
        "4XX":
          $ref: "#/components/responses/RequestValidationError"
        "401":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /users/register:
    post:
      tags:
        - users
      summary: Register user
      description: Register new user with at least `username`, `e-mail` and `password`. This method is supposed to be used
        for clients like web browser and does not require the `x-actorid` header or further authentication!
      operationId: registerUser
      requestBody:
        $ref: "#/components/requestBodies/UsersCreate"
      responses:
        "201":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          $ref: "#/components/responses/UserAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /users/verify:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    post:
      tags:
        - users
      summary: Verify user token
      description: Verify the in header provided user JWT
      operationId: verifyUser
      parameters:
        - name: Authorization
          in: header
          description: user JWT in the request header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "401":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /userImages:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    post:
      tags:
        - userImages
      summary: Add user image
      description: Creates uploaded user image. The operation returns image `id`. Note that you have to set users `imageId`
        to the uploaded image `id` manually.
      operationId: addUserImage
      requestBody:
        $ref: "#/components/requestBodies/Image"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /userImages/{id}:
    get:
      tags:
        - userImages
      summary: Get user image
      description: Get uploaded user profile image by image ID. You can obtain the image ID from the
        corresponding user document
      operationId: getUserImage
      parameters:
        - name: id
          in: path
          description: ID of the users image
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            image/png:
              schema:
                description: User image as PNG
                type: string
                format: binary
            image/jpeg:
              schema:
                description: User image as JPG
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - userImages
      summary: Update user image
      description: Upload and update user image by image ID. Please note that in fact the old image will be deleted and a
        new one will be created. This method acts as an alias for POST and DELETE methods and simplifies this for the API users.
        Furthermore, this means that the new image gets **new** ID. The new ID is returned in the response
      operationId: updateUserImage
      parameters:
        - name: id
          in: path
          description: ID of the users image
          required: true
          explode: true
          schema:
            type: string
        - $ref: "#/components/parameters/actoridParam"
      requestBody:
        $ref: "#/components/requestBodies/Image"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - userImages
      summary: Delete user image
      description: Delete uploaded user profile image by image ID
      operationId: deleteUserImage
      parameters:
        - name: id
          in: path
          description: ID of the users image
          required: true
          explode: true
          schema:
            type: string
        - $ref: "#/components/parameters/actoridParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

servers:
  - url: http://localhost:3007
components:
  requestBodies:
    UsersCreate:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - username
              - email
              - password
            properties:
              username:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
              imageId:
                type: string
              imageUrl:
                type: string
                format: url
    UsersUpdate:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
            description: Minimal required properties to update the user. To see the comlete set of possible attributes please
              refer to the corresponsing schema
            required:
              - username
              - email
            properties:
              username:
                type: string
              email:
                type: string
                format: email
    UsersPatch:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
            properties:
              username:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
              imageId:
                type: string
              imageUrl:
                type: string
                format: url
            minProperties: 1
    Image:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            additionalProperties: false
            required:
              - image
            properties:
              image:
                type: string
                format: binary
          encoding:
            image:
              contentType: image/png, image/jpeg
  schemas:
    User:
      title: User
      description: General User schema
      type: object
      additionalProperties: true
      required:
        - username
        - id
        - email
        - password
        - creationDate
      properties:
        username:
          type: string
        id:
          $ref: "#/components/schemas/UserId"
        email:
          type: string
          format: email
        password:
          type: string
        imageId:
          type: string
          description: ID of the profile image
        imageUrl:
          type: string
          description: URL to external profile image
        creationDate:
          type: string
          format: date-time
          description: User creation date
    UserId:
      title: User id
      description: Unique user identifier
      type: string
      example: "user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    UserResponse:
      title: User response
      description: User response with essential attributes. For full list of possible attributes pleease refer to
        te corresponsing schema.
      type: object
      additionalProperties: true
      properties:
        username:
          type: string
        id:
          type: string
        email:
          type: string
          format: email
        imageId:
          type: string
          description: ID of the profile image
        imageUrl:
          type: string
          description: URL to external profile image
        created:
          type: string
          format: date-time
          description: User creation date
    Error:
      type: object
      additionalProperties: false
      required:
        - type
        - message
        - code
      properties:
        type:
          description: Description of the error type
          type: string
        message:
          description: Description of the error
          type: string
        code:
          description: Erro status code
          type: number
          format: int32
        errors:
          description: JSON Schema validation errors
          type: array
          items:
            type: object
  responses:
    Success:
      description: Succesful operation with response data
      content:
        text/html:
          schema:
            type: string
    SuccessEmpty:
      description: Succesful operation
    Verification:
      description: User verified
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserResponse"
              - type: object
                properties:
                  token:
                    type: string
    UnexpectedError:
      description: Internal error
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Entity not found
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
    InvalidDataError:
      description: Invalid data supplied
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
    NotAuthorizedError:
      description: Wrong credentials supplied
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
    UserAlreadyExistsError:
      description: User with the given email already exists
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
    RequestValidationError:
      description: Request violates API Specification
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
  parameters:
    actoridParam:
      in: header
      description: The id of the origin that produces action/message. Can be an user or a service
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true
    userIdParam:
      in: path
      description: Existing identifier of the user that should be affected by the operation
      name: id
      schema:
        $ref: "#/components/schemas/UserId"
      required: true
