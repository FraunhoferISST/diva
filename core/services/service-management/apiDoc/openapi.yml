openapi: 3.0.0
info:
  description: "Service Management Service is responsible for all CRUD operations on services"
  version: 1.0.0
  title: Service Management API
servers:
  - url: http://localhost:3004
tags:
  - name: services
    description: Operations about services
  - name: serviceImages
    description: Operations on service image. PNG, JPEG and SVG supported. 
paths:
  /services:
    post:
      tags:
        - services
      summary: Create services
      description: Create new services with the provided data. The attributes of the service may vary depending on the
        `serviceType`. The request body must containt at least all the attributes defined in the schema below. This opperations
        supports bulk mode so that multiple service can be created with one request
      operationId: createService
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ServiceCreate"
      responses:
        201:
          $ref: "#/components/responses/ServiceCreateSuccess"
        207:
          $ref: "#/components/responses/Multi"
        "4XX":
          $ref: "#/components/responses/RequestValidationError"
        406:
          $ref: "#/components/responses/InvalidDataError"
        500:
          $ref: "#/components/responses/UnexpectedError"
    get:
      tags:
        - services
      summary: Get list of services
      description: To get the list of services you can specify projection with `fields` paramter and set the
        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`
        parameter. The cursor to the next page will be included in the response body.
      operationId: getServices
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: fields
          in: query
          description: Coma separated projection fields
          example: "title,serviceType,description"
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          example: "aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg=="
          schema:
            type: string
        - name: pageSize
          in: query
          description: Page size
          required: false
          explode: true
          example: 10
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionSize:
                    type: integer
                  collection:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
                  cursor:
                    type: string
        "500":
          $ref: "#/components/responses/UnexpectedError"
  "/services/{id}":
    get:
      tags:
        - services
      summary: Get service by id
      description: Projection can be specified with `fields` parameter
      operationId: getServiceById
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: The id of the service to fetch
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: Comma separated projection fields
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ServiceResponse"
        "4XX":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - services
      summary: Update service
      description: Use this method, if you want to replace complete service. New service is created if no service with
        the provided `id` exists. Note that on this operation **all** fields are replaced.
      operationId: updateService
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: id of the service
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ServiceUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "201":
          description: Service created
        "4XX":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    patch:
      tags:
        - services
      summary: Patch service
      description: Use this method to do a partial update of the service. In the request provided fields
        will be merged with the existing service object.
      operationId: patchService
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: id of the service
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ServicesPatch"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "4XX":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - services
      summary: Delete service
      description: Delete existing service by id
      operationId: deleteService
      parameters:
        - $ref: "#/components/parameters/actorIdParam"
        - name: id
          in: path
          description: id of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "4XX":
          $ref: "#/components/responses/NotFoundError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"      
  /serviceImages:
    parameters:
      - $ref: "#/components/parameters/actorIdParam"
    post:
      tags:
        - serviceImages
      summary: Add service image
      description: Creates uploaded service image. The operation returns image `id`. Note that you have to set service `imageId`
        to the uploaded image `id` manually.
      operationId: addServiceImage
      requestBody:
        $ref: "#/components/requestBodies/Image"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "4XX":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /serviceImages/{id}:
    get:
      tags:
        - serviceImages
      summary: Get service image
      description: Get uploaded service image by image ID. You can obtain the image ID from the
        corresponding service document
      operationId: getServiceImage
      parameters:
        - name: id
          in: path
          description: ID of the service image
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            image/png:
              schema:
                description: Service image as PNG
                type: string
                format: binary
            image/jpeg:
              schema:
                description: Service image as JPG
                type: string
                format: binary
            image/svg:
              schema:
                description: Service image as SVG
                type: string
                format: binary    
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - serviceImages
      summary: Update service image
      description: Upload and update service image by image ID. Please note that in fact the old image will be deleted and a
        new one will be created. This method acts as an alias for POST and DELETE methods and simplifies this for the API services.
        Furthermore, this means that the new image gets **new** ID. The new ID is returned in the response
      operationId: updateServiceImage
      parameters:
        - name: id
          in: path
          description: ID of the services image
          required: true
          explode: true
          schema:
            type: string
        - $ref: "#/components/parameters/actorIdParam"
      requestBody:
        $ref: "#/components/requestBodies/Image"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - serviceImages
      summary: Delete service image
      description: Delete uploaded service image by image ID
      operationId: deleteServiceImage
      parameters:
        - name: id
          in: path
          description: ID of the services image
          required: true
          explode: true
          schema:
            type: string
        - $ref: "#/components/parameters/actorIdParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
components:
  requestBodies:
    ServiceCreate:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ServiceCreate"
              - $ref: "#/components/schemas/ServiceCreateBulk"
    ServiceUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServiceCreate"
    ServicesPatch:
      required: true
      content:
        application/json:
          schema:
            title: Patch body
            description: The body can be any attribute defined in the service schema. The supplied attributes
              overwrite the existing
            type: object
    Image:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            additionalProperties: false
            required:
              - image
            properties:
              image:
                type: string
                format: binary
          encoding:
            image:
              contentType: image/png, image/jpeg, image/svg        
  schemas:
    ServiceCreate:
      description: Minimal required attributes for service creation
      type: object
      required:
        - serviceType
        - title
      properties:
        title:
          type: string
          title: Title
          description: The title of the entity
          minLength: 1
          pattern: "^(.*)$"
        serviceType:
          type: string
          title: Service Type
          description: The general type of the service
          minLength: 1
          enum:
            - generic
            - app
            - plugin
            - api

    ServiceCreateBulk:
      type: array
      title: Service create bulk request
      description: Array of services to create multiple service in one bulk request
      uniqueItems: true
      minItems: 1
      maxItems: 500
      items:
        $ref: "#/components/schemas/ServiceCreate"

    Entity:
      title: General Entity Data
      type: object
      required:
        - title
        - id
        - creatorId
        - created
        - modified
        - entityType
      additionalProperties: true
      properties:
        id:
          type: string
          title: Unique ID
          description: An unique ID of the entity
          example: "entity:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
          format: uri
          pattern: "^service:uuid:"
        created:
          type: string
          title: Creation date
          description: Creation date of the entity
          example: '2018-11-08T13:55:45Z'
          format: date-time
        creator:
          type: string
          title: Creator of the service
          description: The user or the service that created the service
          example: "user:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
          "pattern": "^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
        modified:
          type: string
          title: Modification date
          description: Timestamp of the last change of the data
          example: '2018-11-08T13:55:45Z'
          format: date-time
        title:
          type: string
          title: Title
          description: The title of the entity
          pattern: "^(.*)$"
        entityType:
          type: string
          title: Service Type
          description: The general type of the service
          enum:
            - service
    Service:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
          title: General Service Data
          description: General Service schema
          additionalProperties: true
          required:
            - serviceType
          properties:
            serviceType:
              type: string
              title: Service Type
              description: The general type of the service
              enum:
                - generic
                - app
                - plugin
                - api
    Error:
      type: object
      title: Operation error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object
  responses:
    Success:
      description: Succesful
      content:
        text/html:
          schema:
            type: string
    SuccessEmpty:
      description: Succesful operation without return data        
    Multi:
      description: Multi-status response in case of a bulk request
      content:
        application/json:
          schema:
            title: Multi-status response
            description: Indicates the status for operation for each service in a bulk request
            type: array
            items:
              type: object
              required:
                - statusCode
                - data
              properties:
                statusCode:
                  title: Status Code
                  description: Status Code for single service operation. Can be one of the codes that is returned for
                    opeartion on a single service
                  type: integer
                  example: 201
                data:
                  title: Operation data
                  description: Data as a result of a single service operation
                  oneOf:
                    - type: string
                    - type: object
                error:
                  $ref: "#/components/schemas/Error"

    ServiceCreateSuccess:
      description: Succesful service creation returns created service id
      content:
        text/html:
          schema:
            type: string
            title: Created service id
            description: An unique id of the processed entity
            example: "service:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            format: uri
            pattern: "^service:uuid:"
    ServiceResponse:
      description: Service data response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Service"

    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    RequestValidationError:
      description: Request violates API Specification
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"            
  parameters:
    actorIdParam:
      in: header
      description: The id of the origin that produces action/message. Can be a user or service
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true