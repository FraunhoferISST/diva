openapi: 3.0.0
info:
  description: "Datanetwork Assistant is responsible for communication with the neo4j database."
  version: 1.0.0
  title: Datanetwork Assistant API
servers:
  - url: http://localhost:3013
tags:
  - name: datanetwork
    description: Datanetwork requests

paths:
  /datanetwork/edges/{id}:
    get:
      tags:
        - datanetwork
      summary: Get edges connected to an entity
      operationId: getEdges
      parameters:
        - name: id
          in: path
          description: The id of the resource to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get edges succesfully             
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

  /datanetwork/edges:
    parameters:
      - $ref: "#/components/parameters/actoridParam"  
    put:
      tags:
        - datanetwork
      summary: Put a single edge into the datanetwork.
      operationId: putEdge
      requestBody:
        $ref: "#/components/requestBodies/PutEdge"
      responses:
        "204":
          description: Put edge succesfully             
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"
    
    delete:
      tags:
        - datanetwork
      summary: Delete a single edge from the datanetwork.
      operationId: deleteEdge
      requestBody:
        $ref: "#/components/requestBodies/DeleteEdge"
      responses:
        "204":
          description: Deleted edge succesfully           
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

components:

  requestBodies:
    PutEdge:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Edge"
    DeleteEdge:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Edge"

  schemas:

    EntityId:
      title: Entity ID
      description: Unique identifier of an entity
      type: string
      example: "resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      # pattern: "^+*:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    Edge:
      title: Edge
      description: Definition of an Edge as application/json.
      type: object
      required:
        - from
        - to
        - type
      properties:
        from:
          title: From
          description: From which node the edge is comming.
          type: string
          example: "resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
        to:
          title: To
          description: To which node the edge is going.
          type: string
          example: "resource:uuid:dedsad4d1fcb08-b994-4fff-b662-0f105d597142"
        type:
          title: Type
          description: What type of edge is between the nodes.
          type: string
          example: "isSuccessor" 

    Error:
      type: object
      title: Operation error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object
                  

  responses:
    Success:
      description: Succesful
    DAGNotFoundError:
      description: DAG for Resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ResourceNotFoundError:
      description: Resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"          
    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
  parameters:
    actoridParam:
      in: header
      description: The id of the origin that requests the API. Can be a user or service.
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true
