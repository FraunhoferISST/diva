openapi: 3.0.0
info:
  description: "Datanetwork Assistant is responsible for communication with the neo4j database."
  version: 1.0.0
  title: Datanetwork Assistant API
servers:
  - url: http://localhost:3012
tags:
  - name: edges
    description: Datanetwork requests
  - name: nodes
    description: Datanetwork requests

paths:
  /edges:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    get:
      tags:
        - edges
      summary: Get edges connected to an entity
      description: The method returns a list of edges inforamtion that has relationships to the `from` entity. Note that same 
        node may apper multiple times in the result list, if it has multiple relationships to the `from` entity and 
        `edgeType` query param is not specified. If you want to return all nodes regardless of the edge direction, set `bidirectional`
        query parameter. Please note that if `bidirectional` is true, the response preserves the correct edge direction
        and the `from` entity can appear as a `to` entity corresponding to specific edge type!
      operationId: getEdges
      parameters:
        - name: from
          in: query
          description: The `id` of the entity for wich the relationships will be fetched
          required: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EntityId"
        - name: to
          in: query
          description: Additionaly you can specify the `id` to get edges only betwenn two specific entities
          required: false
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EntityId"
        - name: edgeTypes
          in: query
          description: The types of the relations to be fetched. Is a coma separeted list of known types. If not specified,
            all types will be fetched
          required: false
          schema:
            $ref: "#/components/schemas/EdgeType"
        - name: bidirectional
          in: query
          description: If true, the directions of the edges will be ignored. By default the direction of the
            edge is asumed to be directed from the `from` entity
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Get edges succesfully
          content:
            application/json:
              schema:
                title: Edges
                description: The list of the entities `id`'s in the relationship
                type: object
                properties:
                  collection:
                    type: array
                    items:
                      $ref: "#/components/schemas/Edge"
                  cursor:
                    type: string
                    description: Cursor to the next page. Set the returned cursor as `cursor` query parameter in the
                      next request to retrive following page
                  total:
                    description: Total number of users that could be returned by current query
                    type: number
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - edges
      summary: Post a single edge into the datanetwork.
      operationId: postEdge
      requestBody:
        $ref: "#/components/requestBodies/PostEdge"
      responses:
        "204":
          description: Post edge succesfull. Returns the `id` of the new edge
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/EdgeId"
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"
    
  /edges/{id}:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    get:
      tags:
        - edges
      summary: Get edge data by id
      description: Returns edge data and the `id`'s of by the edge connected entities
      operationId: getEdge
      parameters:
        - name: id
          in: path
          description: The `id` of the edge
          required: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EdgeId"
      responses:
        "200":
          description: Get edge succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Edge"
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

    patch:
      tags:
        - edges
      summary: Patch a single edge in the datanetwork.
      operationId: patchEdge
      requestBody:
        $ref: "#/components/requestBodies/PatchEdge"
      responses:
        "204":
          description: Patch edge succesfull.
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

    delete:
      tags:
        - edges
      summary: Delete a edge by id.
      operationId: deleteEdgeById
      description: Delete a edge from the data network by edge `id`
      parameters:
        - name: id
          in: path
          description: The `id` of the edge
          required: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EdgeId"
      responses:
        "204":
          description: Deleted edge succesfully
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

  /nodes:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    put:
      tags:
        - nodes
      summary: Put a single node into the datanetwork.
      operationId: putNode
      requestBody:
        $ref: "#/components/requestBodies/PutNode"
      responses:
        "204":
          description: Put edge succesfull. Returns the `id` of the new edge
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/EntityId"
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"
  /nodes/{id}:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    get:
      tags:
        - nodes
      summary: Get node data by id
      description: Returns node data
      operationId: getNode
      parameters:
        - name: id
          in: path
          description: The `id` of the node. Is represented by corresponding entity `id`
          required: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EntityId"
      responses:
        "200":
          description: Get node succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

    delete:
      tags:
        - nodes
      summary: Delete a node by id.
      operationId: deleteNodeById
      description: Delete a node from the data network by node `entityId`
      parameters:
        - name: id
          in: path
          description: The `id` of the node, represents the corresponding entity id
          required: true
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EntityId"
      responses:
        "204":
          description: Deleted edge succesfully
        "4XX":
          $ref: "#/components/responses/UnexpectedError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"

components:

  requestBodies:
    PostEdge:
      required: true
      content:
        application/json:
          schema:
            title: Edge
            description: Definition of an Edge as application/json.
            type: object
            required:
              - from
              - to
              - edgeType
            properties:
              from:
                $ref: "#/components/schemas/EntityId"
              to:
                $ref: "#/components/schemas/EntityId"
              edgeType:
                $ref: "#/components/schemas/EdgeType"
              properties:
                type: object
    PatchEdge:
      required: true
      content:
        application/json:
          schema:
            description: "Properties to be patched"
            type: object   
    PutNode:
      required: true
      content:
        application/json:
          schema:
            title: Node
            description: Node defined by the `entityId`
            type: object
            required:
              - entityId
            properties:
              entityId:
                $ref: "#/components/schemas/EntityId"

  schemas:
    EntityId:
      title: Entity ID
      description: Unique identifier of an entity
      type: string
      example: "resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: (user|resource|asset|review|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$

    EdgeId:
      title: Edge ID
      description: Unique identifier of an edge
      type: string
      example: "edge:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: edge:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$

    Edge:
      title: Edge
      description: Definition of an Edge
      type: object
      required:
        - from
        - to
        - edgeType
      properties:
        from:
          title: From entity
          description: The entity from wich the relation is outgoing
          type: object
          properties:
            entityId:
              $ref: "#/components/schemas/EntityId"
        to:
          title: To entity
          description: The entity to wich the relation is going
          type: object
          properties:
            entityId:
              $ref: "#/components/schemas/EntityId"
        edgeType:
          $ref: "#/components/schemas/EdgeType"
        id:
          $ref: "#/components/schemas/EdgeId"
    Node:
      title: Node
      description: Definition of a node
      type: object
      required:
        - entityId
      properties:
        entityId:
          $ref: "#/components/schemas/EntityId"

    EdgeType:
      title: Edge type
      description: The type of the relation that the edge represents
      type: string
      enum:
        - isCreatorOf
        - isPartOf
        - isOwnerOf
        - isReviewOf
        - likes
        - keywordsSimilarity
        - textContentSimilarity

    Error:
      type: object
      title: Operation error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object

  responses:
    Success:
      description: Succesful
    DAGNotFoundError:
      description: DAG for Resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ResourceNotFoundError:
      description: Resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"          
    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
  parameters:
    actoridParam:
      in: header
      description: The id of the origin that requests the API. Can be a user or service.
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true
