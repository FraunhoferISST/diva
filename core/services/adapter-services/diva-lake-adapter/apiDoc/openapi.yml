openapi: 3.0.0
info:
  description: DIVA Lake Adapter provides an API to interact with the DIVA Lake. 
    Currently, only uploading local files to the DIVA Lake is supported.
  version: 1.0.0
  title: DIVA Lake Adapter API
tags:
  - name: import
    description: Imports a local File into the DIVA Lake
paths:
  /import:
    parameters:
      - $ref: "#/components/parameters/divaHeader"
    post:
      tags:
        - import
      summary: POST a local file into the DIVA Lake
      description: Users can have files stored locally on their machine. 
        As we do not have access to these machines (at least no direct access) a user can upload files to a so called DIVA Lake.
      operationId: import
      requestBody:
        $ref: "#/components/requestBodies/File"
      responses:
        201:
          $ref: "#/components/responses/Success"
        4XX:
          $ref: "#/components/responses/RequestValidationError"
        406:
          $ref: "#/components/responses/InvalidDataError"
        500:
          $ref: "#/components/responses/UnexpectedError"
  /download/{fileName}:
    parameters:
      - $ref: "#/components/parameters/divaHeader"
    get:
      tags:
        - download
      summary: Download a file from the DIVA Lake by name
      description: Donwloads a file from the DIVA lake by `fileName`. Files are always associated with a
        resource. There must be an `divaLake` distribution. You can obtain the `fileName` from a corresponding resource as `entityId`.
      operationId: download
      parameters:
        - name: fileName
          in: path
          description: Name of the file wich is a file hash
          required: true
          schema:
            type: string
            example: "resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
            pattern: "^resource:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "200":
          description: Success
          content:
            "*/*":
              schema:
                description: File binary
                type: string
                format: binary
        4XX:
          $ref: "#/components/responses/RequestValidationError"
        500:
          $ref: "#/components/responses/UnexpectedError"

servers:
  - url: http://localhost:4001

components:

  requestBodies:

    File:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            additionalProperties: false
            required:
              - file
            properties:
              file:
                type: string
                format: binary

  schemas:
    ActorId: 
      title: "Actor Id"
      description: "Unique actor identifier. Actor is represented by a user or a internal service"
      type: "string"
      example: "user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
    
    ResourceId:
      title: ResourceId
      description: Unique resource identifier
      type: string
      example: "resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^resource:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    Error:
      type: object
      title: Operation error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object

  responses:

    Success:
      description: Successful operation with response data
      content:
        text/html:
          schema:
            $ref: "#/components/schemas/ResourceId"
    SuccessEmpty:
      description: Succesful operation
    RequestValidationError:
      description: Request violates API Specification
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"        

    ImportUknowlegment:
      description: Import successfuly initiated
    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFoundError:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ResourceAlreadyExistsError:
      description: Resource already imported
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"


  parameters:

    divaHeader: 
      in: "header"
      description: "The system specific stringified object whit relevant data like actorId, token etc."
      name: "x-diva"
      required: true
      schema: 
        type: "string"
        properties: 
          actorId: 
            $ref: "#/components/schemas/ActorId"
