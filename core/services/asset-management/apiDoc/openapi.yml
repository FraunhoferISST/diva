openapi: 3.0.0
info:
  description: "Asset Management Service is responsible for all CRUD operations on assets"
  version: 1.0.0
  title: Asset Management API
servers:
  - url: http://localhost:3002
tags:
  - name: assets
    description: Operations about assets
  - name: entites
    description: Operation about asset linked entites
  - name: assetImages
    description: Operations on assets image. Only PNG and JPEG supported.  
paths:
  /assets:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    post:
      tags:
        - assets
      summary: Create assets
      description: Create new assets with the provided data. The attributes of the asset may vary depending on the
        `assetType`. The request body must containt at least all the attributes defined in the schema below. This opperations
        supports bulk mode so that multiple asset can be created with one request
      operationId: createAsset
      requestBody:
        $ref: "#/components/requestBodies/AssetCreate"
      responses:
        201:
          $ref: "#/components/responses/AssetCreateSuccess"
        207:
          $ref: "#/components/responses/Multi"
        406:
          $ref: "#/components/responses/InvalidDataError"
        409:
          $ref: "#/components/responses/AssetAlreadyExistsError"
        500:
          $ref: "#/components/responses/UnexpectedError"
    get:
      tags:
        - assets
      summary: Get list of assets
      description: To get the list of assets you can specify projection with `fields` paramter and set the
        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`
        parameter. The cursor to the next page will be included in the response body.
      operationId: getAssets
      parameters:
        - name: fields
          in: query
          description: Coma separated projection fields
          example: "title,assetType,description"
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          example: "aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg=="
          schema:
            type: string
        - name: pageSize
          in: query
          description: Page size
          required: false
          explode: true
          example: 10
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionSize:
                    type: integer
                  collection:
                    type: array
                    items:
                      $ref: "#/components/schemas/Asset"
                  cursor:
                    type: string
                  total:
                    type: number
        "500":
          $ref: "#/components/responses/UnexpectedError"
  "/assets/{id}":
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    get:
      tags:
        - assets
      summary: Get asset by id
      description: Projection can be specified with `fields` paramter
      operationId: getAssetById
      parameters:
        - name: id
          in: path
          description: The id of the asset to fetch
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: Coma separated projection fields
          example: "title,assetType,description"
          required: false
          explode: true
          allowReserved: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/AssetResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - assets
      summary: Update asset
      description: Use this method, if you want to replace complete asset. New asset is created if no asset with
        the provided `id` exists. Note that on this operation **all** fields are replaced.
      operationId: updateAsset
      parameters:
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/AssetUpdate"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "201":
          description: Asset created
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          $ref: "#/components/responses/AssetAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    patch:
      tags:
        - assets
      summary: Patch asset
      description: Use this method to do a partial update of the asset. In the request provided fields
        will be merged with the existing asset object.
      operationId: patchAsset
      parameters:
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/AssetsPatch"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/AssetAlreadyExistsError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - assets
      summary: Delete asset
      description: Delete existing asset by id
      operationId: deleteAsset
      parameters:
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  "/assets/{id}/entities":
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    put:
      tags:
        - entites
      summary: Link entity to asset
      description: Link an entity with the asset by entity id. The operation supports bulk request to link multiple entites
        in one request
      operationId: linkEntity
      parameters:
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
            example: "asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            pattern: "^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        $ref: "#/components/requestBodies/LinkEntity"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "207":
          $ref: "#/components/responses/Multi"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          $ref: "#/components/responses/AssetAlreadyExistsError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"
    get:
      tags:
        - entites
      summary: Get entities associated with the given asset
      description: Retuns a list of entities `id`'s linked with the give asset. You have the possibility to paginate
        throug the list with `pagesSize` and `cursor` query parameters.
      operationId: linkEntity
      parameters:
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
            example: "asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            pattern: "^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          example: "aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg=="
          schema:
            type: string
        - name: pageSize
          in: query
          description: Page size
          required: false
          explode: true
          example: 10
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Asset data response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
                  pattern: "^(asset|user|resource):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "5XX":
          $ref: "#/components/responses/UnexpectedError"
  "/assets/{id}/entities/{entityId}":
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    delete:
      tags:
        - entities
      summary: Unlikn entity from asset
      description: Unlikn an entity from the asset by entity id
      operationId: unliknAsset
      parameters:
        - name: id
          in: path
          description: id of the asset
          required: true
          schema:
            type: string
            example: "asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            pattern: "^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
        - name: entityId
          in: path
          description: id of the entity
          required: true
          schema:
            example: "resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /assetImages:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    post:
      tags:
        - assetImages
      summary: Add asset image
      description: Creates uploaded asset image. The operation returns image `id`. Note that you have to set asset `imageId`
        to the uploaded image `id` manually.
      operationId: addAssetImage
      requestBody:
        $ref: "#/components/requestBodies/Image"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /assetImages/{id}:
    get:
      tags:
        - assetImages
      summary: Get asset image
      description: Get uploaded asset profile image by image ID. You can obtain the image ID from the
        corresponding asset document
      operationId: getAssetImage
      parameters:
        - name: id
          in: path
          description: ID of the asset image
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            image/png:
              schema:
                description: Asset image as PNG
                type: string
                format: binary
            image/jpeg:
              schema:
                description: Asset image as JPG
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      tags:
        - assetImages
      summary: Update asset image
      description: Upload and update asset image by image ID. Please note that in fact the old image will be deleted and a
        new one will be created. This method acts as an alias for POST and DELETE methods and simplifies this for the API assets.
        Furthermore, this means that the new image gets **new** ID. The new ID is returned in the response
      operationId: updateAssetImage
      parameters:
        - name: id
          in: path
          description: ID of the assets image
          required: true
          explode: true
          schema:
            type: string
        - $ref: "#/components/parameters/actoridParam"
      requestBody:
        $ref: "#/components/requestBodies/Image"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "406":
          $ref: "#/components/responses/InvalidDataError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - assetImages
      summary: Delete asset image
      description: Delete uploaded asset image by image ID
      operationId: deleteAssetImage
      parameters:
        - name: id
          in: path
          description: ID of the assets image
          required: true
          explode: true
          schema:
            type: string
        - $ref: "#/components/parameters/actoridParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmpty"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"        

components:
  requestBodies:
    AssetCreate:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/AssetCreate"
              - $ref: "#/components/schemas/AssetCreateBulk"
    LinkEntity:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/LinkEntity"
              - $ref: "#/components/schemas/LinkEntityBulk"
    AssetUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AssetCreate"
    AssetsPatch:
      required: true
      content:
        application/json:
          schema:
            title: Patch body
            description: The body can be any attribute defined in the asset schema. The supplied attributes
              overwrite the existing
            type: object
            minProperties: 1
    Image:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            additionalProperties: false
            required:
              - image
            properties:
              image:
                type: string
                format: binary
          encoding:
            image:
              contentType: image/png, image/jpeg        
  schemas:
    AssetCreate:
      description: Minimal required attributes for asset creation
      type: object
      required:
        - assetType
        - title
        - entities
      properties:
        title:
          type: string
          title: Title
          description: The title of the entity
          minLength: 1
          pattern: "^(.*)$"
        assetType:
          type: string
          title: Asset Type
          description: The general type of the asset
          minLength: 1
          enum:
            - generic
            - urbanPulse
        entities:
          type: array
          title: Asset linked entities
          description: The array of entites id's linked with the asset
          uniqueItems: true
          items:
            type: string
            pattern: "^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
            example: "resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
        uniqueFingerprint:
          type: string
          title: Unique asset identifier
          description: Global unique asset identifier from title hash
          example: g2jh3g4j2g34jh23jh423jh4f2oöklkcghjfajsfklj3294urjk

    AssetCreateBulk:
      type: array
      title: Asset create bulk request
      description: Array of assets to create multiple asset in one bulk request
      uniqueItems: true
      minItems: 1
      maxItems: 500
      items:
        $ref: "#/components/schemas/AssetCreate"
    LinkEntity:
      description: Entity id of the entity to link
      type: object
      required:
        - entityId
      properties:
        entityId:
          type: string
          example: "resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
          pattern: "^(asset|user|resource):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    LinkEntityBulk:
      type: array
      title: Link entites bulk request
      description: Array of entites id's to link multiple with an asset in one bulk request
      uniqueItems: true
      minItems: 1
      maxItems: 500
      items:
        $ref: "#/components/schemas/LinkEntity"

    Entity:
      title: General Entity Data
      type: object
      required:
        - title
        - id
        - creatorId
        - created
        - modified
        - entityType
      additionalProperties: true
      properties:
        id:
          type: string
          title: Unique ID
          description: An unique ID of the entity
          example: "entity:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
          format: uri
          pattern: "^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
        created:
          type: string
          title: Creation date
          description: Creation date of the entity
          example: '2018-11-08T13:55:45Z'
          format: date-time
        creatorId:
          type: string
          title: Creator of the asset
          description: The user or the service that created the asset
          example: "user:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
          "pattern": "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
        modified:
          type: string
          title: Modification date
          description: Timestamp of the last change of the data
          example: '2018-11-08T13:55:45Z'
          format: date-time
        title:
          type: string
          title: Title
          description: The title of the entity
          pattern: "^(.*)$"
        entityType:
          type: string
          title: Asset Type
          description: The general type of the asset
          enum:
            - asset
    Asset:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
          title: General Asset Data
          description: General Asset schema
          additionalProperties: true
          required:
            - assetType
          properties:
            assetType:
              type: string
              title: Asset Type
              description: The general type of the asset
              enum:
                - generic
                - urbanPulse
            entities:
              type: array
              title: Asset linked entities
              description: The array of entites id's linked with the asset
              uniqueItems: true
              items:
                type: string
                pattern: "^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                example: "resource:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            uniqueFingerprint:
              type: string
              title: Unique asset identifier
              description: Global unique asset identifier from title hash
              example: g2jh3g4j2g34jh23jh423jh4f2oöklkcghjfajsfklj3294urjk

    Error:
      type: object
      title: Operation error
      description: Error that can occure on request processing
      required:
        - type
        - message
        - code
      properties:
        type:
          title: Error type
          description: Futher error type information
          type: string
        message:
          title: Error message
          description: Details about error
          type: string
        code:
          title: Error code
          description: HTTP error code
          type: number
          format: int32
          example: 409
        errors:
          title: Errors
          description: More error details that are reference in most case specification or schema validation errors
          type: array
          items:
            type: object
    UserId:
      title: User id
      description: Unique user identifier
      type: string
      example: "user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

  responses:
    Success:
      description: Succesful
      content:
        text/html:
          schema:
            type: string
    SuccessEmpty:
      description: Succesful operation without return data
    Multi:
      description: Multi-status response in case of a bulk request
      content:
        application/json:
          schema:
            title: Multi-status response
            description: Indicates the status for operation for each asset in a bulk request
            type: array
            items:
              type: object
              required:
                - statusCode
                - uniqueFingerprint
              properties:
                statusCode:
                  title: Status Code
                  description: Status Code for single asset operation. Can be one of the codes that is returned for
                    opeartion on a single asset
                  type: integer
                  example: 201
                uniqueFingerprint:
                  type: string
                  title: Unique indentifier
                  description: Global Unique indentifier as described in asset schema
                data:
                  title: Operation data
                  description: Data as a result of a single asset operation
                  oneOf:
                    - type: string
                    - type: object
                error:
                  $ref: "#/components/schemas/Error"

    AssetCreateSuccess:
      description: Succesful asset creation retruns created asset id
      content:
        text/html:
          schema:
            type: string
            title: Created asset id
            description: An unique id of the processed entity
            example: "asset:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9"
            format: uri
            pattern: "^asset:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
    AssetResponse:
      description: Asset data response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Asset"

    UnexpectedError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidDataError:
      description: Invalid data supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    AssetAlreadyExistsError:
      description: Asset with the given `uniqueFingerprint` already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    RequestValidationError:
      description: Request violates API Specification
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"        
  parameters:
    actoridParam:
      in: header
      description: The id of the origin that produces action/message. Can be a user or service
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true
    userIdParam:
      in: path
      description: Existing identifier of the user that should be affected by the operation
      name: id
      schema:
        $ref: "#/components/schemas/UserId"
      required: true
