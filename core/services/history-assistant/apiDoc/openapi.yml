openapi: 3.0.0

info:
  description: "History Assistant Service is responsible for providing history entities and a human readable
    representation."
  version: 1.0.0
  title: History Assistant API

servers:
  - url: http://localhost:3006

tags:
  - name: histories
    description: Operations on history entities

paths:
  /histories:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
    get:
      tags:
        - histories
      summary: Get list of histories
      description: To get the list of histories you can specify projection with `fields` paramter and set the
        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`
        parameter. The cursor to the next page will be included in the response body
      operationId: getHistories
      parameters:
        - name: fields
          in: query
          description: Coma separated projection fields
          required: false
          explode: true
          schema:
            type: string
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          explode: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 30
            format: int32
        - name: attributedTo
          in: query
          description: Entity the history belongs to
          required: false
          allowReserved: true
          schema:
            $ref: "#/components/schemas/EntityId"
        - name: humanReadable
          in: query
          description: When true, will return human readable diff text
          required: false
          schema:
            type: boolean    
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionSize:
                    type: integer
                  collection:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoryResponse"
                  cursor:
                    type: string
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /histories/{id}:
    parameters:
      - $ref: "#/components/parameters/actoridParam"
      - $ref: "#/components/parameters/historyIdParam"
    get:
      tags:
        - histories
      summary: Get history by id
      description: Projection can be specified with `fields` paramter
      operationId: getHistoryById
      parameters:
        - name: fields
          in: query
          description: Comma separated projection fields
          required: false
          explode: true
          schema:
            type: string
        - name: humanReadable
          in: query
          description: When true, will return human readable diff text
          required: false
          schema:
            type: boolean      
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryResponse"
        "400":
          $ref: "#/components/responses/RequestValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    

components:

  schemas:

    HistoryId:
      title: History Id
      description: Unique history identifier
      type: string
      example: "history:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^history:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    ActorId:
      title: Actor Id
      description: Unique actor identifier
      type: string
      example: "user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"

    EntityId:
      title: Entity Id
      description: Unique entity identifier
      type: string
      example: "response:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189"
      pattern: "^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$" 

    HistoryResponse:
      title: History Response
      description: History Response schema
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        creatorId:
          $ref: "#/components/schemas/ActorId"
        entityType:
          type: string
        modified:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        attributedTo:
          $ref:  "#/components/schemas/EntityId"
        delta:
          type: object
        humanReadable:
          type: array  

    Error:
      type: object
      additionalProperties: false
      required:
        - type
        - message
        - code
      properties:
        type:
          description: Description of the error type
          type: string
        message:
          description: Description of the error
          type: string
        code:
          description: Erro status code
          type: number
          format: int32
        errors:
          description: JSON Schema validation errors
          type: array
          items:
            type: object

  responses:

    UnexpectedError:
      description: Internal error
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

    NotFoundError:
      description: Entity not found
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

    RequestValidationError:
      description: Request violates API Specification
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

  parameters:
    actoridParam:
      in: header
      description: The id of the origin that produces action/message. Can be a user or service
      name: x-actorid
      schema:
        type: string
        minLength: 1
        pattern: "^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
      required: true
    historyIdParam:
      in: path
      description: Existing identifier of the history element that should be affected by the operation
      name: id
      schema:
        $ref: "#/components/schemas/HistoryId"
      required: true
